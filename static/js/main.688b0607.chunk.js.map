{"version":3,"sources":["Search.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterdata","filteredKeyResults","searchOnKey","dataList","toConsumableArray","state","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","push","err","return","setState","searchContent","result","onChangeHandler","bind","assertThisInitialized","event","searchResult","input","target","toUpperCase","states","i","length","indexOf","_this2","react_default","a","createElement","className","style","color","inputBoxFontColor","fontSize","inputBoxFontSize","border","concat","inputBoxBorderColor","height","inputBoxHeight","alignIcon","disableIcon","placeholder","type","name","onChange","map","items","key","Component","defaultProps","place","App","src_Search_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.688b0607.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Search.css';\n\n\nclass Search extends Component {\n\tstatic defaultProps = {\n\t\tplaceholder: \"Search...\",\n\t\talignIcon: \"left\",\n\t\tinputBoxFontColor: \"black\",\n\t\tinputBoxFontSize: \"1.5rem\",\n\t\tinputBoxBorderColor: \"#ccc\",\n\t\tinputBoxHeight: \"50px\"\n\t}\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t\tdata: this.props.dataList,\n\t\t\t\tsearchContent: \" \",\n\t\t\t\tresult: [],\n\t\t\t\tfilteredKeyResults: []\n\t\t}\n\t\tthis.onChangeHandler = this.onChangeHandler.bind(this);\n\t}\n\n\t// Search on key\n\tfilterdata = () => {\n    \tconst filteredKeyResults = [];\n    \tconst searchOnKey = this.props.searchOnKey;\n    \tconst dataList = [...this.state.data];\n    \tfor(let data of dataList) {\n\t\t\t\tif(data[searchOnKey]) filteredKeyResults.push(data);\t\t\t\t\n\t\t\t}\n    \tthis.setState({filteredKeyResults: filteredKeyResults})\n  \t}\n\n  componentDidMount() {\n    this.filterdata();\n  }\n\n\t// onChange Handler\n\tonChangeHandler(event){\n\t\tvar searchResult = [];\n\t\tconst input = event.target.value.toUpperCase();\n\t\tconst states = [...this.state.filteredKeyResults];\n\t\t\n\t\tfor(var i = 0; i < states.length; i++){\n\t\t\t\t\t\t\t\t\n\t\t\tif(states[i][this.props.searchOnKey].toUpperCase().indexOf(input) !== -1) searchResult.push(states[i]);\n\t\t}\n\n\t\tif(!event.target.value){\n\t\t\tsearchResult= []\n\t\t};\n\t\t\n\n\t\tthis.setState({\n\t\t\tresult: searchResult\n\t\t});\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"Search\">\n\t\t\t\t<input \n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor:this.props.inputBoxFontColor, \n\t\t\t\t\t\tfontSize:this.props.inputBoxFontSize, \n\t\t\t\t\t\tborder:`5px solid ${this.props.inputBoxBorderColor}`,\n\t\t\t\t\t\theight:this.props.inputBoxHeight\n\t\t\t\t\t\t}}\n\t\t\t\t\tclassName={`Search-Bar ${this.props.alignIcon} ${this.props.disableIcon === \"true\" ? \"disabled\" : \" \"} `} \n\t\t\t\t\tplaceholder={this.props.placeholder} \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tname={this.state.searchContent} onChange={this.onChangeHandler} \t\t\t\t\t\t\n\t\t\t\t/>\n\n\t\t\t\t<ul className=\"list\">\n\t\t\t\t\t{this.state.result.map(items =>\n\t\t\t\t\t\t<li key={items.key}>{items[this.props.searchOnKey]}</li>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Search;","var states = [\n    {\n    \"key\": \"AN\",\n    \"name\": \"Andaman and Nicobar Islands\"\n    },\n    {\n    \"key\": \"AP\",\n    \"name\": \"Andhra Pradesh\",\n    \"place\": \"virar\"\n    },\n    {\n    \"key\": \"AR\",\n    \"name\": \"Arunachal Pradesh\",\n    \"place\": \"miraroad\"\n    },\n    {\n    \"key\": \"AS\",\n    \"name\": \"Assam\"\n    },\n    {\n    \"key\": \"BR\",\n    \"name\": \"Bihar\"\n    },\n    {\n    \"key\": \"CG\",\n    \"name\": \"Chandigarh\"\n    },\n    {\n    \"key\": \"CH\",\n    \"name\": \"Chhattisgarh\"\n    },\n    {\n    \"key\": \"DH\",\n    \"name\": \"Dadra and Nagar Haveli\"\n    },\n    {\n    \"key\": \"DD\",\n    \"name\": \"Daman and Diu\"\n    },\n    {\n    \"key\": \"DL\",\n    \"name\": \"Delhi\"\n    },\n    {\n    \"key\": \"GA\",\n    \"name\": \"Goa\"\n    },\n    {\n    \"key\": \"GJ\",\n    \"name\": \"Gujarat\"\n    },\n    {\n    \"key\": \"HR\",\n    \"name\": \"Haryana\"\n    },\n    {\n    \"key\": \"HP\",\n    \"name\": \"Himachal Pradesh\"\n    },\n    {\n    \"key\": \"JK\",\n    \"name\": \"Jammu and Kashmir\"\n    },\n    {\n    \"key\": \"JH\",\n    \"name\": \"Jharkhand\"\n    },\n    {\n    \"key\": \"KA\",\n    \"name\": \"Karnataka\"\n    },\n    {\n    \"key\": \"KL\",\n    \"name\": \"Kerala\"\n    },\n    {\n    \"key\": \"LD\",\n    \"name\": \"Lakshadweep\"\n    },\n    {\n    \"key\": \"MP\",\n    \"name\": \"Madhya Pradesh\"\n    },\n    {\n    \"key\": \"MH\",\n    \"name\": \"Maharashtra\"\n    },\n    {\n    \"key\": \"MN\",\n    \"name\": \"Manipur\"\n    },\n    {\n    \"key\": \"ML\",\n    \"name\": \"Meghalaya\"\n    },\n    {\n    \"key\": \"MZ\",\n    \"name\": \"Mizoram\"\n    },\n    {\n    \"key\": \"NL\",\n    \"name\": \"Nagaland\"\n    },\n    {\n    \"key\": \"OR\",\n    \"name\": \"Odisha\"\n    },\n    {\n    \"key\": \"PY\",\n    \"name\": \"Puducherry\"\n    },\n    {\n    \"key\": \"PB\",\n    \"name\": \"Punjab\"\n    },\n    {\n    \"key\": \"RJ\",\n    \"name\": \"Rajasthan\"\n    },\n    {\n    \"key\": \"SK\",\n    \"name\": \"Sikkim\"\n    },\n    {\n    \"key\": \"TN\",\n    \"name\": \"Tamil Nadu\"\n    },\n    {\n    \"key\": \"TS\",\n    \"name\": \"Telangana\"\n    },\n    {\n    \"key\": \"TR\",\n    \"name\": \"Tripura\"\n    },\n    {\n    \"key\": \"UP\",\n    \"name\": \"Uttar Pradesh\"\n    },\n    {\n    \"key\": \"UK\",\n    \"name\": \"Uttarakhand\"\n    },\n    {\n    \"key\": \"WB\",\n    \"name\": \"West Bengal\"\n    }\n    ]\n\n export default states;","import React from 'react';\nimport Search from './Search';\nimport states from './Data';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search searchOnKey=\"name\" dataList={states} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}